I - Les fonctions

// une procédure (par abus de langage, on appelle tous ceci une fonction)
// on exécute des instructions sans retourner de valeur
Variables
Debut Fonction sayHello()
    Afficher "Hello"
    Afficher "Hello2"
Fin fonction

// une fonction : même chose qu'une procédure mais renvoie une valeur
Variables
    resultat: entier
Debut Fonction displayMultiplication()
    resultat = 5 * 5

    retourner resultat
    // dès qu'une instruction "retourner" est exécutée, la fonction est finie
    // même si du code est écrit après cette ligne
Fin fonction

Variables
    // les variables d'une fonction ont une portée locale :
    // elles ne sont accessibles que dans la fonction
    somme: entier
Debut fonction addition(nombre1:entier, nombre2:entier) // cette ligne est ce qu'on appelle la signature de la fonction
    // V1
    somme = nombre1 + nombre2
    retourner somme

    // V2
    retourner nombre1 + nombre2
Fin fonction

Variables
// paramètres optionnels : on donne une valeur par défaut
// directement dans la signature
// on n'est plus obligé de passer le paramètre lors de l'appel
// de la fonction
// ATTENTION : les paramètres optionnels sont forcément définis en dernier dans la signature
// il ne peut y avoir aucun paramètre obligatoire après un paramètre optionnel
Debut fonction sayHelloTo(firstname:chaine, language:chaine="FR")
    SI language == "FR"
        afficher "Bonjour " CONCAT firstname
    SINON SI language == "EN"
        afficher "Hello " CONCAT firstname
    SINON
        // lancer l'exception : faire planter exprès l'appli car valeur non autorisée
        lancer exception
    FIN SI
Fin fonction

Variables
Debut fonction afficherPrenoms(prenomsParametre:tableau de chaine)
    POUR CHAQUE prenom DANS prenomsParametre
        afficher prenom
    FIN POUR
Fin fonction

Variables
    nombre: entier
    variableFonction: function
    prenomUtilisateur: chaine
Debut algo
    sayHello()
    sayHello()
    afficher displayMultiplication()
    nombre = displayMultiplication()

    // on peut affecter une fonction à une variable
    variableFonction = displayMultiplication
    // du coup on peut utiliser cette variable comme si c'était une variable
    afficher variableFonction() // affiche 5

    // utiliser une fonction avec ces paramètres : passer des valeurs aux paramètres
    // dans l'ordre où ils sont définis dans la signature de la fct
    afficher addition(2, 12) // affiche 14
    afficher addition(25, 3) // affiche 28

    // on peut utiliser la valeur de retour comme l'on souhaite
    SI (addition(2, 5) > 6)
        // on rentre ici car 7 > 6
    FIN SI

    ajouter "toto" dans prenoms
    ajouter "jean" dans prenoms
    afficherPrenoms(prenoms)

    ajouter "toto2" dans listePrenoms
    ajouter "jean2" dans listePrenoms
    afficherPrenoms(listePrenoms)

    prenomUtilisateur = saisir "Quel est votre prénom ?"
    sayHelloTo(prenomUtilisateur, "FR")
    sayHelloTo(prenomUtilisateur, "EN")

    sayHelloTo("David")
    sayHelloTo("Ivan")
    sayHelloTo("Ivan", "EN")

    sayHelloTo("Toto", "ES") // lancer l'exception : faire planter exprès l'appli car valeur non autorisée
Fin algo

Exercice :
Créer une fonction qui multiplie deux nombres (passés en paramètre)
entre eux et retourne le résultat.
Utiliser cette fonction dans un algo principal et afficher le résultat.

Variables
    produit: entier
Debut fonction multiplication(nb1:entier, nb2:entier):entier
    produit = nb1 * nb2
    retourner produit
Fin

Variables
    resultat: entier
Debut algo
    resultat = multiplication(12, 2)
    afficher resultat

    resultat = multiplication(45, 2)
    afficher resultat
Fin algo

Créer une fonction qui prend un âge (entier) en paramètre et
retourne si oui ou non (booléen) cet âge est celui d’une personne majeure.
Utilisez cette fonction dans un algo principal,
et afficher « Vous êtes majeur » si elle renvoie vrai, « Vous êtes mineur » sinon.

Variables
    majeur: booléen
Debut Fonction estMajeur(age:entier):boolean
    // V1
    SI age >= 18
        majeur = vrai
    SINON
        majeur = faux
    FIN SI

    retourner majeur

    // V1 BIS
    majeur = age >= 18 ? vrai : faux
    retourner majeur

    // V2
    SI age >= 18
        retourner vrai
    SINON
        retourner faux
    FIN SI

    // V3 : affecteur une le résultat d'une condition dans une variable
    majeur = age >= 18
    retourner majeur

    // V4 : retourner directement le résultat de la condition
    retourner age >= 18

Fin fonction

Variables
    age: entier
    msg: chaine
Debut algo
    age = 15
    SI estMajeur(age) == vrai
        afficher "Vous êtes majeur"
    SINON
        afficher "Vous êtes mineur"
    FIN SI

    age = 18
    SI estMajeur(age) == vrai
        afficher "Majeur"
    SINON
        afficher "Mineur"
    FIN SI

    // affecter une valeur grâce à une condition ternaire : une condition ? valeur si vraie : valeur si faux
    msg = estMajeur(age) == vrai ? "Vous êtes majeur" : "Vous êtes mineur"

    // il est inutile de comparer une fonction qui retourne un booléan avec vrai ou faux : elle est elle-même FAUX ou VRAIE
    // ce qui est suffisant dans une condition
    msg = estMajeur(age) ? "Vous êtes majeur" : "Vous êtes mineur"
    afficher msg

    SI estMajeur(age)
        afficher "Vous êtes majeur"
    SINON
        afficher "Vous êtes mineur"
    FIN SI
Fin algo

// V LAST
Variables
Debut Fonction estMajeur(age:entier):boolean
    retourner age >= 18
Fin fonction

Variables
    age: entier
Debut algo
    age = 17

    SI estMajeur(age)
        afficher "Vous êtes majeur"
    SINON
        afficher "Vous êtes mineur"
    FIN SI
Fin algo


Exercices :
Exercice 8 du doc :
Demander à l’utilisateur de saisir un nombre de notes indéterminé (-1 pour stop), en stockant ces notes dans un tableau.
Afficher ensuite la note la plus basse.
Faire deux boucles : une pour remplir le tableau, une autre pour trouver la note la plus basse.

Variables
    notes: tableau entier
    note: entier
    min: entier
Debut algo
    note = Saisir "Veuillez saisir une note"
    TANT QUE note != -1
        ajouter note dans notes
        note = Saisir "Merci. Veuillez saisir une note"
    FIN TANT QUE

    min = notes[0]
    POUR i ALLANT DE 0 à LONGUEUR(notes) - 1 PAR PAS DE 1
        SI notes[i] <= min
            min = notes[i]
        FIN SI
    FIN POUR

    // étant donné qu'il est inutile de comparer la première note
    // avec la première note, on peut démarrer le pour à l'indice 1
    // pour comparer tout de suite la deuxième avec la première (qu'on a considérée
    // comme étant la plus petite pour initialiser la variable "min")
    min = notes[0]
    POUR i ALLANT DE 1 à LONGUEUR(notes) - 1 PAR PAS DE 1
        SI notes[i] <= min
            min = notes[i]
        FIN SI
    FIN POUR
Fin algo

Exercice 9 du doc :
Demander à l’utilisateur de saisir un nombre de notes indéterminé (-1 pour stop),
en stockant ces notes dans un tableau.
Créer une fonction qui retourne la valeur la plus grande d'un tableau (d'entier),
utilisez cette fonction dans un algo principal.

Variables
    notes: tableau entier
    note: entier
Debut fonction saisirNotes()
    note = Saisir "Veuillez saisir une note"
    TANT QUE note != -1
        ajouter note dans notes
        note = Saisir "Veuillez saisir une note"
    FIN TANT QUE
    retourner notes
Fin fonction

Variable
    maximum: entier
Debut fonction max(tabEntiers: tableau entier)
    maximum = tabEntiers[0]
    POUR i ALLANT de 1 à LONGUEUR(tabEntiers)-1 PAR PAS DE 1
        SI tabEntiers[i] >= maximum
            maximum = tabEntiers[i]
        FIN SI
    FIN POUR

    retourner maximum
Fin fonction

Variables
    listeNotes: tableau de entier
Début algo
    listeNotes = saisirNotes()
    afficher max(listeNotes)

    liste2 = saisirNotes()
    afficher max(liste2)
Fin algo


Exercice 12 du doc :
Créer une fonction qui prend en paramètre un tableau,
et qui retourne un nouveau tableau dont tous les éléments du premier ont été inversés.
[1,3,2] => [2,3,1]
["toto", "bidule"] => ["bidule", "toto"]

Variables
    nouveauTab : tableau chaine
Debut fonction reverse(tab: tableau chaine)
    /*
    ["a", "b", "c", "d"]
    ["d", "c", "b", "a"]
    [0] = [LONGUEUR(tab)-1-0]
    [1] = [LONGUEUR(tab)-1-1]
    [2] = [LONGUEUR(tab)-1-2]
    [3] = [LONGUEUR(tab)-1-3]

    [3] = [0]
    [2] = [1]
    [1] = [2]
    [0] = [3]
    */

    POUR i ALLANT DE LONGUEUR(tab)-1 à 0 PAR PAS de -1
        nouveauTab[i] = tab[LONGUEUR(tab)-1-i]
    FIN POUR

    retourner nouveauTab
Fin fonction

Variables
    tabPrenoms: tableau chaine
    tabPrenomsInverses: tableau chaine
Debut algo
    ajouter "jean" dans tabPrenoms
    ajouter "kevin" dans tabPrenoms

    tabPrenomsInverses = reverse(tabPrenoms)
Fin algo


Ecrire une fonction isPalindrome
qui prend un paramètre (chaine de caractère) et qui retourne si oui ou non
cette chaine est un palindrome
Vous pouvez utiliser cette chaine comme si c'était un tableau, c'est à dire
accéder à chacune des lettres grâce à sa position (indice)
prenom: chaine
prenom = "toto"
prenom[1] : correspond à la lettre o

maison : nosiam
kayak : kayak

Variables
    nouveauMot: chaine
    isPalin: booléen
Debut fonction isPalindrome(mot:chaine)
    // v1 : créer un nouveau mot avec les lettres inversés et regarder les deux mots sont égaux
    POUR i ALLANT DE 0 à LONGUEUR(mot)-1 PAR PAS de 1
        nouveauMot[i] = mot[LONGUEUR(mot)-1-i]
    FIN POUR

    retourner nouveauMot == mot

    // v2
    bonjour 7-1=6  7 : 3 tours
    b r 0 6
    o u 1 5
    n o 2 4
    j j
    o n
    u o
    r b

    tototo 6 : 3 tours
    t o
    o t
    t o
    o t
    t o
    o t

    isPalin = vrai
    POUR i ALLANT DE 0 à LONGUEUR(mot)-1 PAR PAS de 1
        SI mot[i] != mot[LONGUEUR(mot)-1-i]
            isPalin = faux
        FIN SI
    FIN POUR

    retourner isPalin

Fin fonction

Variables
    word: chaine
Debut algo
    word = Saisir "Veuillez saisir un mot"
    SI isPalindrome(word)
        afficher "Votre mot est un palindrome"
    SINON
        afficher "Papalindrome"
    FIN SI
Fin algo

Fonctions récursives

Debut Fonction pasTriche(nbAffichages:entier)
    SI nbAffichages > 0
        afficher "Je dois pas tricher"
        pasTriche(nbAffichages-1)
    FIN SI
Fin fonction

Debut algo
    pasTriche(50)
    pasTriche(150)
Fin algo

Variables
Debut fonction factorielle(chiffre:entier)
    SI chiffre > 1
        retourner chiffre * factorielle(chiffre-1)
    FIN SI

    retourner 1
Fin fonction

5
1 * 1 = 1
1 * 2 = 2
2 * 3 = 6
6 * 4 = 24
24 * 5 = 120

Debut algo
    /*
    5!
    1 * 2 * 3 * 4 * 5

    3!
    1 * 2 * 3
    */
    afficher factorielle(5)
Fin algo
